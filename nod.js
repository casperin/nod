// Generated by CoffeeScript 1.6.1
(function() {
  var FieldListener, Nod, NodMsg,
    _this = this;

  FieldListener = (function() {

    function FieldListener($el, vars) {
      var _this = this;
      this.$el = $el;
      this.createChecker = function($el) {
        return FieldListener.prototype.createChecker.apply(_this, arguments);
      };
      this.runCheck = function() {
        return FieldListener.prototype.runCheck.apply(_this, arguments);
      };
      this.delayedCheck = function() {
        return FieldListener.prototype.delayedCheck.apply(_this, arguments);
      };
      this.events = function() {
        return FieldListener.prototype.events.apply(_this, arguments);
      };
      this.checker = vars[0], this.delay = vars[1];
      this.delayId = "";
      this.$el.status = true;
      this.type = this.$el.attr('type');
      this.checkField = this.createChecker(this.$el);
      this.events();
    }

    FieldListener.prototype.events = function() {
      if (this.type === 'radio') {
        return jQuery('[name=' + this.$el.attr("name") + ']').on('change', this.runCheck);
      } else {
        this.$el.on('change', this.runCheck);
        this.$el.on('blur', this.runCheck);
        if (this.delay !== false) {
          return this.$el.on('keyup', this.delayedCheck);
        }
      }
    };

    FieldListener.prototype.delayedCheck = function() {
      clearTimeout(this.delayId);
      return this.delayId = setTimeout(this.runCheck, this.delay);
    };

    FieldListener.prototype.runCheck = function() {
      var isCorrect;
      isCorrect = this.checkField();
      if (this.$el.status === isCorrect) {
        return;
      }
      this.$el.status = isCorrect;
      return this.$el.trigger('nod_toggle');
    };

    FieldListener.prototype.createChecker = function($el) {
      if (this.type === 'checkbox') {
        return function() {
          return this.checker($el.is(':checked'));
        };
      } else if (this.type === 'radio') {
        if ($el.attr("name") !== "") {
          return function() {
            return this.checker(jQuery('[name=' + this.$el.attr("name") + ']:checked').val());
          };
        } else {
          return function() {
            return !$el.is(':checked') || $el.is(':checked') === this.checker($el.val());
          };
        }
      } else {
        return function() {
          return this.checker(jQuery.trim($el.val()));
        };
      }
    };

    return FieldListener;

  })();

  (function($) {
    return $.fn.nod = function(fields, settings) {
      new Nod(this, fields, settings);
      return this;
    };
  })(jQuery);

  Nod = (function() {

    function Nod(form, fields, options) {
      var _this = this;
      this.form = form;
      this.fields = fields;
      this.createEls = function() {
        return Nod.prototype.createEls.apply(_this, arguments);
      };
      this.toggleSubmitBtn = function() {
        return Nod.prototype.toggleSubmitBtn.apply(_this, arguments);
      };
      this.toggleGroupClass = function($target) {
        return Nod.prototype.toggleGroupClass.apply(_this, arguments);
      };
      this.toggle = function(ev) {
        return Nod.prototype.toggle.apply(_this, arguments);
      };
      this.massCheck = function(ev) {
        return Nod.prototype.massCheck.apply(_this, arguments);
      };
      this.events = function() {
        return Nod.prototype.events.apply(_this, arguments);
      };
      this.get = jQuery.extend({
        'delay': 700,
        'disableSubmitBtn': true,
        'helpSpanDisplay': 'help-inline',
        'groupClass': 'error',
        'submitBtnSelector': '[type=submit]',
        'metricsSplitter': ':',
        'errorPosClasses': ['.help-inline', '.add-on', 'button', '.input-append'],
        'broadcastError': false,
        'errorClass': 'nod_msg',
        'groupSelector': '.control-group'
      }, options);
      this.err = ["Arguments for each field must have three parts: ", "Couldn't find any form: ", "Couldn't find any Submit button: ", "The selector in 'same-as' isn't working", "I don't know "];
      if (!this.fields) {
        return;
      }
      this.els = this.createEls();
      this.submit = this.form.find(this.get.submitBtnSelector);
      this.checkIfElementsExist(this.form, this.submit, this.disableSubmitBtn);
      this.events();
    }

    Nod.prototype.checkIfElementsExist = function(form, submit, disableSubmitBtn) {
      if (!form.selector || !form.length) {
        throw this.err[1] + form;
      }
      if (!submit.length && disableSubmitBtn) {
        throw this.err[2] + submit;
      }
    };

    Nod.prototype.events = function() {
      var $el, _i, _len, _ref, _results;
      if (this.submit.length) {
        this.submit.on('click', this.massCheck);
      } else {
        this.form.on('submit', this.massCheck);
      }
      _ref = this.els;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        $el = _ref[_i];
        _results.push($el.on('nod_toggle', this.toggle));
      }
      return _results;
    };

    Nod.prototype.massCheck = function(ev) {
      var $el, _i, _len, _ref, _results;
      _ref = this.els;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        $el = _ref[_i];
        $el.trigger('change');
        if (!$el.status) {
          _results.push(ev.preventDefault());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Nod.prototype.toggle = function(ev) {
      this.toggleGroupClass(jQuery(ev.currentTarget));
      if (this.get.disableSubmitBtn) {
        return this.toggleSubmitBtn();
      }
    };

    Nod.prototype.toggleGroupClass = function($target) {
      var $group, errCls;
      $group = $target.parents(this.get.groupSelector);
      errCls = $group.find('.' + this.get.errorClass);
      if (errCls.length) {
        return $group.addClass(this.get.groupClass);
      } else {
        return $group.removeClass(this.get.groupClass);
      }
    };

    Nod.prototype.toggleSubmitBtn = function() {
      var d;
      d = 'disabled';
      this.submit.removeClass(d).removeAttr(d);
      if ((jQuery(this.els).filter(function() {
        return !this.status;
      })).length) {
        return this.submit.addClass(d).attr(d, d);
      }
    };

    Nod.prototype.createEls = function() {
      var $el, el, els, field, listenVars, nodMsgVars, _i, _j, _len, _len1, _ref, _ref1;
      els = [];
      _ref = this.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        if (field.length !== 3) {
          throw this.err[0] + field;
        }
        nodMsgVars = [field[2], this.get.helpSpanDisplay, this.get.errorClass, this.get.errorPosClasses, this.get.broadcastError];
        listenVars = [this.makeChecker(field[1]), this.get.delay];
        _ref1 = this.form.find(field[0]);
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          el = _ref1[_j];
          $el = jQuery(el);
          els.push($el);
          new NodMsg($el, nodMsgVars);
          new FieldListener($el, listenVars);
        }
      }
      return els;
    };

    Nod.prototype.makeChecker = function(m) {
      var arg, sec, type, _ref;
      if (!!(m && m.constructor && m.call && m.apply)) {
        return function(v) {
          return m(v);
        };
      }
      if (m instanceof RegExp) {
        return function(v) {
          return m.test(v);
        };
      }
      _ref = jQuery.map(m.split(this.get.metricsSplitter), jQuery.trim), type = _ref[0], arg = _ref[1], sec = _ref[2];
      if (type === 'same-as' && jQuery(arg).length !== 1) {
        throw new Error(this.err[3]);
      }
      switch (type) {
        case 'presence':
          return function(v) {
            return !!v;
          };
        case 'exact':
          return function(v) {
            return !v || v === arg;
          };
        case 'not':
          return function(v) {
            return !v || v !== arg;
          };
        case 'same-as':
          return function(v) {
            return !v || v === jQuery(arg).val();
          };
        case 'min-num':
          return function(v) {
            return !v || +v >= +arg;
          };
        case 'max-num':
          return function(v) {
            return !v || +v <= +arg;
          };
        case 'between-num':
          return function(v) {
            return !v || +v >= +arg && +v <= +sec;
          };
        case 'min-length':
          return function(v) {
            return !v || v.length >= +arg;
          };
        case 'max-length':
          return function(v) {
            return !v || v.length <= +arg;
          };
        case 'exact-length':
          return function(v) {
            return !v || v.length === +arg;
          };
        case 'between':
          return function(v) {
            return !v || v.length >= +arg && v.length <= +sec;
          };
        case 'integer':
          return function(v) {
            return !v || /^\s*\d+\s*$/.test(v);
          };
        case 'float':
          return function(v) {
            return !v || /^[-+]?[0-9]+(\.[0-9]+)?$/.test(v);
          };
        case 'email':
          return function(v) {
            return !v || /^([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22))*\x40([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d))*$/.test(v);
          };
        default:
          throw this.err[4] + type;
      }
    };

    return Nod;

  })();

  NodMsg = (function() {

    function NodMsg($el, vars) {
      var msgArg,
        _this = this;
      this.$el = $el;
      this.createShowMsg = function() {
        return NodMsg.prototype.createShowMsg.apply(_this, arguments);
      };
      this.toggle = function() {
        return NodMsg.prototype.toggle.apply(_this, arguments);
      };
      this.events = function() {
        return NodMsg.prototype.events.apply(_this, arguments);
      };
      msgArg = {};
      msgArg.msg = vars[0], msgArg.display = vars[1], msgArg.cls = vars[2], this.pos_classes = vars[3], this.broadcastError = vars[4];
      this.$msg = this.createMsg(msgArg);
      this.showMsg = this.createShowMsg();
      this.events();
    }

    NodMsg.prototype.events = function() {
      return this.$el.on('nod_toggle', this.toggle);
    };

    NodMsg.prototype.createMsg = function(arg) {
      return jQuery('<span/>', {
        'html': arg.msg,
        'class': arg.display + ' ' + arg.cls
      });
    };

    NodMsg.prototype.toggle = function() {
      if (this.$el.status) {
        return this.$msg.remove();
      } else {
        this.showMsg();
        if (this.broadcastError) {
          return this.broadcast();
        }
      }
    };

    NodMsg.prototype.createShowMsg = function() {
      var pos, type;
      type = this.$el.attr('type');
      if (type === 'checkbox' || type === 'radio') {
        return function() {
          return this.$el.parent().append(this.$msg);
        };
      } else {
        pos = this.findPos(this.$el);
        return function() {
          return pos.after(this.$msg);
        };
      }
    };

    NodMsg.prototype.findPos = function($el) {
      if (this.elHasClass('parent', $el)) {
        return this.findPos($el.parent());
      }
      if (this.elHasClass('next', $el)) {
        return this.findPos($el.next());
      }
      return $el;
    };

    NodMsg.prototype.elHasClass = function(dir, $el) {
      var s, _i, _len, _ref;
      _ref = this.pos_classes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        if ($el[dir](s).length) {
          return true;
        }
      }
      return false;
    };

    NodMsg.prototype.broadcast = function() {
      var data;
      data = {
        'el': this.$el,
        'msg': this.$msg.html()
      };
      return jQuery(window).trigger('nod_error_fired', data);
    };

    return NodMsg;

  })();

}).call(this);
